!function() {
    "use strict";
    app = app || {};
    var e = new Date;
    app.chatroomTopic = "CHATROOM_DEMO_" + e.getFullYear() + e.getMonth() + e.getDate(),
    app.yunba_demo = new Yunba({
        server: "sock.yunba.io",
        port: 443,
        secure: !0,
        appkey: "54d0c24252be1f7e1dd84c42"
    }),
    app.Chatroom = Backbone.Model.extend({
        defaults: {
            errors: [],
            errfor: {},
            username: "游客#" + Math.floor(1e5 * Math.random()),
            message: "",
            userList: [],
            numUsers: 1
        }
    }),
    app.ChatroomView = Backbone.View.extend({
        el: "#view-chatroom",
        events: {
            'keypress [id="chatroom-input"]': "sendMessageOnEnter",
            "click #btn-send-msg": "sendMessage",
            "click .picture-reader": "readPicture",
            "click #btn-send-icon": "microExpSelector",
            "click .microExp-div": "microExpSend",
            "click .chat-play": "voicePlay",
            "click .chat-play-video": "videoClickPlayEvent"
        },
        initialize: function() {
            this.model = new app.Chatroom,
            this.checkLogin(),
            this.initYunbaSDK(),
            this.initCloseWindowEvent(),
            $("#btn-send-multimedia").popover("show"),
            this.initLoadingModal(),
            this.initMicroExpressions();
            var e = "";
            $.ajax({
                method: "get",
                url: "/publicApi/chatroom/uptoken",
                async: !1,
                cache: !1,
                beforeSend: function() {},
                success: function(t) {
                    e = t.uptoken,
                    console.log("获取文件上传权限成功:" + e)
                },
                error: function(e) {
                    console.log("获取文件上传权限失败"),
                    $("#btn-send-multimedia").attr("disabled", !0)
                }
            }),
            this.initQiniuUploader(e, this, app.chatroomTopic),
            this.initRecorder(e, this),
            this.initPlayer(),
            this.initVideojs()
        },
        checkLogin: function() {
            var e = this;
            $.get("/checklogin/", function(t, a) {
                "success" == a && t.user_name && e.model.set({
                    username: t.user_name
                })
            })
        },
        initYunbaSDK: function() {
            var e = this;
            this.logMessage("正在初始化..."),
            $(".chatroom-btn").attr("disabled", !0),
            app.yunba_demo.init(function(t) {
                t ? (e.logMessage("初始化成功..."),
                e.connect()) : (e.logMessage("初始化失败或服务断线，若长时间无响应请尝试刷新页面"),
                e.connect())
            }, function() {
                e.logMessage("服务断线，正在尝试重新连接..."),
                e.sendState("OFFLINE"),
                e.connect()
            })
        },
        connect: function() {
            var e = this;
            e.logMessage("正在尝试连接...");
            var t = "yunba_chatroom_demo_" + Math.floor(1e5 * Math.random());
            app.yunba_demo.connect_by_customid(t, function(t, a) {
                t ? (e.logMessage("连接成功..."),
                e.setMessageCallback(),
                e.subscribe(app.chatroomTopic)) : e.logMessage(a)
            })
        },
        subscribe: function(e) {
            var t = this;
            t.logMessage("正在尝试加入房间..."),
            app.yunba_demo.subscribe({
                topic: e
            }, function(e, a) {
                e ? (t.logMessage("加入房间成功..."),
                t.sendState("ONLINE"),
                t.getOnlineUsers(),
                $(".chatroom-btn").attr("disabled", !1)) : t.logMessage(a)
            })
        },
        unsubscribe: function(e) {
            app.yunba_demo.unsubscribe({
                topic: e
            })
        },
        getOnlineUsers: function() {
            var e = JSON.stringify({
                dataType: "GET_ONLINE_USERS"
            });
            this.publish(app.chatroomTopic, e)
        },
        sendState: function(e) {
            var t = JSON.stringify({
                dataType: "ONLINE_STATE",
                dataContent: e,
                username: this.model.get("username")
            });
            this.publish(app.chatroomTopic, t)
        },
        sendMessage: function() {
            if ("" !== $("#chatroom-input").val()) {
                var e = JSON.stringify({
                    dataType: "MESSAGE",
                    dataContent: $("#chatroom-input").val(),
                    username: this.model.get("username")
                });
                this.publish(app.chatroomTopic, e),
                $("#chatroom-input").val("")
            }
        },
        publish: function(e, t) {
            var a = this;
            app.yunba_demo.publish({
                topic: e,
                msg: t
            }, function(e, t) {
                e ? console.log("消息发布成功") : a.logMessage(t)
            })
        },
        setMessageCallback: function() {
            var e = this;
            app.yunba_demo.set_message_cb(function(t) {
                e.dataController(t.msg),
                e.webNotifications(e, t.msg)
            })
        },
        dataController: function(e) {
            e = JSON.parse(e),
            "MESSAGE" === e.dataType ? this.addMessageElement(e) : "PICTURE" === e.dataType ? this.addMessagePicElement(e) : "MICROEXP" === e.dataType ? this.addMessagePicElement(e) : "VOICE" === e.dataType ? this.addMessageVoiceElement(e) : "VIDEO" === e.dataType ? this.addMessageVideoElement(e) : "FILE" === e.dataType ? this.addMessageFileElement(e) : "ONLINE_STATE" === e.dataType ? this.userController(e) : "GET_ONLINE_USERS" === e.dataType ? this.sendState("ONLINE") : console.log("发生错误...")
        },
        userController: function(e) {
            var t = this.model.get("userList")
              , a = this.model.get("numUsers")
              , o = e.username;
            if ("ONLINE" === e.dataContent)
                -1 === t.indexOf(o) && (t.push(o),
                a = t.length,
                this.addOnlineUserElement(o));
            else if ("OFFLINE" === e.dataContent) {
                var n = t.indexOf(o);
                -1 != n && (t.splice(n, 1),
                a = t.length,
                this.removeOnlineUserElement(o))
            }
            this.model.set("userList", t),
            this.model.set("numUsers", a)
        },
        addOnlineUserElement: function(e) {
            var t = $("#chat-online-list")
              , a = $('<li class="list-group-item"/>').text(e);
            a.attr("id", e),
            t.append(a)
        },
        removeOnlineUserElement: function(e) {
            $('li[id="' + e + '"]').remove()
        },
        addMessageElement: function(e, t) {
            var a = $("#chat-messages");
            if (t)
                return a.append($("<li>").addClass("chat-log").text(e.log)),
                void a.scrollTop(a[0].scrollHeight);
            var o = $('<span class="chat-username"/>').text(e.username)
              , n = $('<span class="chat-message-body">').text(e.dataContent)
              , i = $('<li class="chat-message"/>').data("username", e.username).append(o, n);
            a.append(i),
            a.scrollTop(a[0].scrollHeight)
        },
        addMessagePicElement: function(e) {
            var t = $("#chat-messages")
              , a = $('<span class="chat-username"/>').text(e.username)
              , o = $('<img  class="picture-reader" alt="图片文件，请检查网络" src=' + e.dataContent + " data-username=" + e.username + ">")
              , n = $('<li class="chat-message"/>').data("username", e.username).append(a, o);
            t.append(n),
            t.scrollTop(t[0].scrollHeight)
        },
        addMessageVoiceElement: function(e) {
            var t = $("#chat-messages")
              , a = $('<div class ="chat-voice-div"></div>')
              , o = $('<span class="chat-username"/>').text(e.username)
              , n = $("<span></span>").text("语音消息：")
              , i = $('<a class="chat-play"  src=' + e.dataContent + " data-username=" + e.username + ">")
              , s = $("<audio>您的浏览器不支持audio标签，请升级后再使用</audio>");
            a.append(o, n, i, s);
            var r = $('<li class="chat-message"/>').data("username", e.username).append(a);
            t.append(r),
            t.scrollTop(t[0].scrollHeight)
        },
        addMessageVideoElement: function(e) {
            var t = $("#chat-messages")
              , a = $('<div class ="chat-video-div"></div>')
              , o = $('<span class="chat-username"/>').text(e.username)
              , n = $("<span></span>").text("视频消息：")
              , i = $('<a class="chat-play-video" src=' + e.dataContent + ">");
            a.append(o, n, i);
            var s = $('<li class="chat-message"/>').data("username", e.username).append(a);
            t.append(s),
            t.scrollTop(t[0].scrollHeight)
        },
        addMessageFileElement: function(e) {
            var t = $("#chat-messages")
              , a = $('<div class ="chat-file-div"></div>')
              , o = $('<span class="chat-username"/>').text(e.username)
              , n = $("<span></span>").text("文件消息：")
              , i = $("<a>").attr({
                href: e.dataContent,
                download: "yunba_demo_download",
                title: "点击下载"
            })
              , s = $("<img>").attr("src", "/static/img/file_download.png");
            i.append(s),
            a.append(o, n, i);
            var r = $('<li class="chat-message"/>').data("username", e.username).append(a);
            t.append(r),
            t.scrollTop(t[0].scrollHeight)
        },
        logMessage: function(e) {
            this.addMessageElement({
                log: e
            }, !0)
        },
        preventSubmit: function(e) {
            e.preventDefault()
        },
        sendMessageOnEnter: function(e) {
            13 === e.keyCode && (e.preventDefault(),
            "chatroom-input" === $(e.target).attr("id") && this.sendMessage())
        },
        initCloseWindowEvent: function() {
            var e = this;
            $(window).on("unload", function() {
                e.sendState("OFFLINE"),
                e.unsubscribe(app.chatroomTopic)
            })
        },
        readPicture: function(e) {
            var t = $(e.currentTarget)
              , a = t.attr("src")
              , o = t.attr("data-username");
            $("#chatroom-picture-reader img").attr("src", a),
            $("#reader-tips").html("发送者：" + o),
            $("#chatroom-picture-reader").modal("show")
        },
        microExpSelector: function() {
            $("#chatroom-icon-selector").modal("show")
        },
        microExpSend: function(e) {
            var t = $(e.currentTarget)
              , a = t.children().attr("src")
              , o = JSON.stringify({
                dataType: "MICROEXP",
                dataContent: a,
                username: this.model.get("username")
            });
            this.publish(app.chatroomTopic, o),
            $("#chatroom-icon-selector").modal("hide")
        },
        webNotifications: function(e, t) {
            var t = JSON.parse(t);
            if (t.username === e.model.get("username"))
                return 0;
            if (window.Notification)
                if ("MESSAGE" === t.dataType || "PICTURE" === t.dataType || "MICROEXP" === t.dataType || "VOICE" === t.dataType || "FILE" === t.dataType || "VIDEO" === t.dataType) {
                    var a = navigator.userAgent.toLowerCase();
                    a.indexOf("safari") != -1 && a.indexOf("chrome") > -1 ? Notification.requestPermission().then(function(e) {
                        if ("granted" == e) {
                            if ("PICTURE" === t.dataType || "MICROEXP" === t.dataType)
                                var a = new Notification(t.username,{
                                    body: "[图片消息]",
                                    icon: "/static/img/user.png"
                                });
                            else if ("VOICE" === t.dataType)
                                var a = new Notification(t.username,{
                                    body: "[语音消息]",
                                    icon: "/static/img/user.png"
                                });
                            else if ("FILE" === t.dataType)
                                var a = new Notification(t.username,{
                                    body: "[文件消息]",
                                    icon: "/static/img/user.png"
                                });
                            else if ("VIDEO" === t.dataType)
                                var a = new Notification(t.username,{
                                    body: "[视频消息]",
                                    icon: "/static/img/user.png"
                                });
                            else
                                var a = new Notification(t.username,{
                                    body: t.dataContent,
                                    icon: "/static/img/user.png"
                                });
                            a.onclick = function() {
                                a.close()
                            }
                        } else
                            Notification.requestPermission(),
                            console.log('chrome用户请在 "设置->隐私设置->内容设置－>通知"选择本网站点击允许'),
                            console.log("没有权限,用户拒绝:Notification")
                    }) : Notification.requestPermission(function(e) {
                        if ("granted" == e) {
                            if ("PICTURE" === t.dataType || "MICROEXP" === t.dataType)
                                var a = new Notification(t.username,{
                                    body: "[图片消息]",
                                    icon: "/static/img/user.png"
                                });
                            else if ("VOICE" === t.dataType)
                                var a = new Notification(t.username,{
                                    body: "[语音消息]",
                                    icon: "/static/img/user.png"
                                });
                            else if ("FILE" === t.dataType)
                                var a = new Notification(t.username,{
                                    body: "[文件消息]",
                                    icon: "/static/img/user.png"
                                });
                            else if ("VIDEO" === t.dataType)
                                var a = new Notification(t.username,{
                                    body: "[视频消息]",
                                    icon: "/static/img/user.png"
                                });
                            else
                                var a = new Notification(t.username,{
                                    body: t.dataContent,
                                    icon: "/static/img/user.png"
                                });
                            a.onclick = function() {
                                a.close()
                            }
                        } else
                            Notification.requestPermission(),
                            console.log('chrome用户请在 "设置->隐私设置->内容设置－>通知"选择本网站点击允许'),
                            console.log("没有权限,用户拒绝:Notification")
                    })
                } else
                    console.log("该消息类型不通知");
            else
                console.log("不支持Notification")
        },
        initRecorder: function(e, t) {
            function a(e, t) {
                console.log(e)
            }
            function o(e) {
                var t = r.createMediaStreamSource(e);
                a("Media stream created.多媒体流创建成功."),
                c = new Recorder(t),
                a(" Recorder initialised.录音机初始化.")
            }
            function n(e) {
                c && c.record(),
                a("Recording.开始录音...")
            }
            function i(e, t) {
                return e.lastModifiedDate = new Date,
                e.name = t,
                e
            }
            function s(e, t, o) {
                c && c.stop(),
                a("Stopped recording.停止录音."),
                c && c.exportWAV(function(e) {
                    if (44 === e.size)
                        return console.log("用户没有开始录音"),
                        alert("未检测到声音信号，请确认设备完好！"),
                        0;
                    var a = URL.createObjectURL(e);
                    $("#testdownload").attr("download", (new Date).toISOString() + ".wav"),
                    $("#testdownload").attr("href", a);
                    var n = a.split("/")
                      , s = n[n.length - 1]
                      , r = ((new Date).getTime(),
                    "voice-" + s + ".wav")
                      , c = i(e, r)
                      , d = new FormData;
                    d.append("name", r),
                    d.append("chunk", "0"),
                    d.append("chunks", "1"),
                    d.append("key", r),
                    d.append("file", c),
                    d.append("token", t),
                    $.ajax({
                        type: "POST",
                        url: "https://up.qbox.me",
                        data: d,
                        processData: !1,
                        contentType: !1,
                        beforeSend: function(e) {
                            $("#chatroom-loading-dialog").modal("show")
                        }
                    }).done(function(e) {
                        var t = "https://od7uu00in.qnssl.com/" + e.key;
                        o.voiceSend(t)
                    }).fail(function(e, t, a) {
                        console.log(a),
                        $("#chatroom-loading-error").modal("show")
                    }).always(function() {
                        $("#chatroom-loading-dialog").modal("hide")
                    })
                });
                try {
                    c.clear()
                } catch (n) {
                    throw new Error("用户没有授权")
                }
            }
            var r, c;
            $(function() {
                try {
                    window.AudioContext = window.AudioContext || window.webkitAudioContext,
                    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia || navigator.mediaDevices.getUserMedia,
                    window.URL = window.URL || window.webkitURL,
                    r = new AudioContext,
                    a("Audio context set up."),
                    a("navigator.getUserMedia " + (navigator.getUserMedia ? "available." : "not present!"))
                } catch (i) {
                    alert("对不起，您的浏览器不支持语音录入功能，要体验最新版聊天室功能请切换至最新的chrome/firefox浏览器!"),
                    setTimeout("$('#btn-send-voice-start').attr('disabled',true);$('#btn-send-voice-stop').attr('disabled',true);", 5e3)
                }
                try {
                    navigator.getUserMedia({
                        audio: !0
                    }, o, function(e) {
                        a("No live audio input: " + e)
                    })
                } catch (i) {
                    throw new Error("录音机初始化失败")
                }
                $("#btn-send-voice-start").on("click", function() {
                    n(this),
                    $("#chatroom-input").attr("disabled", !0).attr("placeholder", "录音中..."),
                    $(this).parent().addClass("hide"),
                    $("#btn-send-voice-stop").parent().removeClass("hide")
                }),
                $("#btn-send-voice-stop").on("click", function() {
                    var a = $("#btn-send-voice-start");
                    a.removeClass("btn-warning"),
                    a.html("录音"),
                    $(this).parent().addClass("hide"),
                    $("#btn-send-voice-start").parent().removeClass("hide"),
                    $("#chatroom-input").attr("disabled", !1).attr("placeholder", ""),
                    s(this, e, t)
                })
            })
        },
        initVideojs: function() {
            $(".yb-video-close").on("click", function() {
                $("#message-video_html5_api")[0].pause()
            }),
            videojs("message-video", {}, function() {})
        },
        videoClickPlayEvent: function(e) {
            var t = $(e.target)
              , a = t.attr("src");
            $("#chatroom-video-player").modal("show"),
            $("#message-video_html5_api").attr("src", a)
        },
        initPlayer: function() {
            var e = $("#chatroomPlayer")
              , t = ($("#chatroomPlayer")[0],
            $(".chat-play"));
            e.on("ended", function() {
                t.removeClass("chat-playing"),
                $(".chat-play").removeClass("chat-playing")
            })
        },
        voicePlay: function(e) {
            var t = $("#chatroomPlayer")
              , a = $("#chatroomPlayer")[0]
              , o = $(e.target)
              , n = o.attr("src");
            a.pause(),
            a.currentTime = 0,
            o.addClass("chat-playing"),
            t.attr("src", n),
            a.play()
        },
        voiceSend: function(e) {
            var t = JSON.stringify({
                dataType: "VOICE",
                dataContent: e,
                username: this.model.get("username")
            });
            this.publish(app.chatroomTopic, t)
        },
        initMicroExpressions: function() {
            $(".microExp-div").on("click", $.proxy(function(e) {
                this.microExpSend(e)
            }, this))
        },
        initLoadingModal: function() {
            $("#chatroom-loading-dialog").modal({
                backdrop: "static",
                keyboard: !1,
                show: !1
            }),
            $("#chatroom-picture-reader").modal({
                show: !1
            }),
            $("#chatroom-icon-selector").modal({
                show: !1
            }),
            $("#chatroom-loading-error").modal({
                backdrop: "static",
                keyboard: !1,
                show: !1
            }),
            $("#chatroom-video-player").modal({
                backdrop: "static",
                keyboard: !1,
                show: !1
            })
        },
        initQiniuUploader: function(e, t, a) {
            var o = {};
            o.btn = "btn-send-multimedia",
            o.domain = "https://od7uu00in.qnssl.com/",
            o.container = "view-chatroom",
            o.max_file_size = "10mb",
            o.uptoken = e;
            Qiniu.uploader({
                runtimes: "html5,flash,html4",
                browse_button: o.btn,
                uptoken_url: "/publicApi/chatroom/uptoken",
                get_new_uptoken: !1,
                unique_names: !0,
                domain: o.domain,
                container: o.container,
                max_file_size: o.max_file_size,
                filters: {
                    max_file_size: o.max_file_size,
                    prevent_duplicates: !1,
                    mime_types: [{
                        title: "Video files",
                        extensions: "webm,mp4,ogg"
                    }, {
                        title: "Image files",
                        extensions: "jpg,gif,png"
                    }, {
                        title: "vioce files",
                        extensions: "wav,mp3,ogv"
                    }, {
                        title: "Zip files",
                        extensions: "zip"
                    }]
                },
                flash_swf_url: "path/of/plupload/Moxie.swf",
                max_retries: 3,
                dragdrop: !0,
                drop_element: o.container,
                chunk_size: "4mb",
                auto_start: !0,
                init: {
                    FilesAdded: function(e, t) {
                        $("#chatroom-loading-dialog").modal("show"),
                        plupload.each(t, function(t) {
                            var a = new FileProgress(t,"fsUploadProgress");
                            a.setStatus("等待..."),
                            a.bindUploadCancel(e)
                        })
                    },
                    BeforeUpload: function(e, t) {
                        var a = new FileProgress(t,"fsUploadProgress")
                          , o = plupload.parseSize(this.getOption("chunk_size"));
                        "html5" === e.runtime && o && a.setChunkProgess(o)
                    },
                    UploadProgress: function(e, t) {
                        var a = new FileProgress(t,"fsUploadProgress")
                          , o = plupload.parseSize(this.getOption("chunk_size"));
                        a.setProgress(t.percent + "%", t.speed, o)
                    },
                    FileUploaded: function(e, o, n) {
                        var i = e.getOption("domain")
                          , s = JSON.parse(n)
                          , r = i + s.key;
                        Qiniu.watermark({
                            mode: 2,
                            text: "yunba.io",
                            dissolve: 50,
                            gravity: "SouthWest",
                            fontsize: 120,
                            font: "黑体",
                            dx: 10,
                            dy: 10,
                            fill: "##FFF000"
                        }, s.key);
                        if ("image/png" === o.type || "image/jpeg" === o.type || "image/gif" === o.type || "image/jpg" === o.type) {
                            var c = JSON.stringify({
                                dataType: "PICTURE",
                                dataContent: r,
                                username: t.model.get("username")
                            });
                            t.publish(a, c),
                            o.destroy()
                        } else if ("audio/wav" === o.type || "audio/mp3" === o.type || "audio/ogg" === o.type || "audio/mpeg" === o.type || "video/ogg" === o.type || "audio/x-wav" === o.type) {
                            var c = JSON.stringify({
                                dataType: "VOICE",
                                dataContent: r,
                                username: t.model.get("username")
                            });
                            t.publish(a, c),
                            o.destroy()
                        } else if ("video/webm" === o.type || "video/mp4" === o.type || "video/ogv" === o.type) {
                            var c = JSON.stringify({
                                dataType: "VIDEO",
                                dataContent: r,
                                username: t.model.get("username")
                            });
                            t.publish(a, c),
                            o.destroy()
                        } else {
                            var c = JSON.stringify({
                                dataType: "FILE",
                                dataContent: r,
                                username: t.model.get("username")
                            });
                            t.publish(a, c),
                            o.destroy()
                        }
                    },
                    Error: function(e, t, a) {
                        t.code == -602 ? ($("#dialog-error").html("您已上传过该文件，不允许对服务器重复上传相同文件"),
                        $("#chatroom-loading-error").modal("show")) : ($("#dialog-error").html("上传出错:" + a),
                        $("#chatroom-loading-error").modal("show"));
                        var o = new FileProgress(t.file,"fsUploadProgress");
                        o.setError(),
                        o.setStatus(a),
                        $("#fsUploadProgress").html("")
                    },
                    UploadComplete: function() {
                        $("#chatroom-loading-dialog").modal("hide"),
                        $("#fsUploadProgress").html("")
                    },
                    Key: function(e, t) {
                        var a = "";
                        return a
                    }
                }
            })
        },
        onBeforeDestroy: function() {
            app.yunba_demo && app.yunba_demo.disconnect(),
            $("#btn-send-multimedia").uploadify("destroy")
        }
    }),
    $(document).ready(function() {
        app.chatroomView = new app.ChatroomView
    })
}();
